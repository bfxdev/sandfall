/******************************
 * Pixel-level draw prototype *
 ******************************/

// Logging facility on HTML page (a div with id "log" must be present)
function log(text)
{
  var elem = document.getElementById("log");
  if (elem)
  {
    var node = document.createElement("p");
    node.innerHTML = text;
    elem.appendChild(node);
  }
  console.log(text);
}

// Status display facility on HTML page (a div with id "status" must be present)
function status(text)
{
  var elem = document.getElementById("status");
  if (elem)
    elem.innerHTML = text;
}

// Draw canvas for pixel-level operations, based on an internal buffer to be drawn in one operation 
// Color arguments are 32-bits RGBA integers
// Previous buffer used for getPixel operations (double-buffering), updated during draw
class PixelMap
{
  // Initialization based on canvas element ID
  constructor(id, background)
  {
    // Gets data from HTML and initializes canvas-related objects
    this.canvas = document.getElementById(id);
    this.width = canvas.width;
    this.height = canvas.height;
    this.context = canvas.getContext("2d");

    // Initializes buffers
    this.background = background;
    this.imageBuffer = this.context.getImageData(0, 0, this.width, this.height);
    //var a = new Uint8ClampedArray(this.imageBuffer.data);
    this.previousBuffer = undefined; //new ImageData(a, this.width, this.height);
    this.fill(this.background);
    this.draw();
  }

  // Draws image buffer to canvas element and retrieves data again in shadow buffer
  draw()
  {
    this.context.putImageData(this.imageBuffer, 0, 0);
    this.previousBuffer = this.context.getImageData(0, 0, this.width, this.height);
    // this.previousBuffer.data.set(this.imageBuffer.data);

    // this.previousBuffer = new Uint8ClampedArray(this.imageBuffer.data);
    // this.previousBuffer.data.set(originalImageData.data);
  }

  // Sets given color of pixel at given coordinate in image buffer
  setPixel(x, y, color)
  {
    // Exits if the given coordinate is not within canvas
    if (x<0 || y<0 || x>=this.width || y>=this.height)
      return;

    // Fills the RGBA values from 32-bits integer
    var index = (x + y * this.width) * 4;
    this.imageBuffer.data[index]   = (color / 16777216) & 255; // JS bitwise operations on signed 32 bits
    this.imageBuffer.data[index+1] = (color / 65536)    & 255;
    this.imageBuffer.data[index+2] = (color / 256)      & 255;
    this.imageBuffer.data[index+3] = (color)            & 255;
  }

  // Returns the color of the pixel at given coordinate from shadow buffer
  getPixel(x, y, previous=false)
  {
    // Exits if the given coordinate is not within canvas
    if (x<0 || y<0 || x>=this.width || y>=this.height)
      return this.background;

    // Packs RGBA values into one 32-bits integer 
    var index = (x + y * this.width) * 4;
    var res;
    if (previous)
    {
      res =           this.previousBuffer.data[index];
      res = res*256 + this.previousBuffer.data[index+1];
      res = res*256 + this.previousBuffer.data[index+2];
      res = res*256 + this.previousBuffer.data[index+3];
    }
    else
    {
      res =           this.imageBuffer.data[index];
      res = res*256 + this.imageBuffer.data[index+1];
      res = res*256 + this.imageBuffer.data[index+2];
      res = res*256 + this.imageBuffer.data[index+3];
    }

    return res;
  }

  // Returns true if the pixel at given coordinates is set to a color different than the background
  isSet(x, y, previous=false)
  {
    return this.getPixel(x, y, previous) != this.background;
  }


  // Fills the given rectangle in the image buffer
  fillRect(x, y, width, height, color)
  {
    for (var i=x; i<x+width; i++)
      for (var j=y; j<y+height; j++)
        this.setPixel(i, j, color);
  }

  // Fills the complete area with the same color
  fill(color)
  {
    this.fillRect(0, 0, this.width, this.height, color);
  }

  fontCPC = 
     [0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
      0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 
      0x0c, 0x18, 0x30, 0x7e, 0x0c, 0x18, 0x30, 0x00, 0xff, 0xc3, 0xe7, 0xdb, 0xdb, 0xe7, 0xc3, 0xff, 
      0x00, 0x01, 0x03, 0x06, 0xcc, 0x78, 0x30, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xff, 0x24, 0xe7, 0x00, 
      0x00, 0x00, 0x30, 0x60, 0xff, 0x60, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x06, 0xff, 0x06, 0x0c, 0x00, 
      0x18, 0x18, 0x18, 0x18, 0xdb, 0x7e, 0x3c, 0x18, 0x18, 0x3c, 0x7e, 0xdb, 0x18, 0x18, 0x18, 0x18, 
      0x18, 0x5a, 0x3c, 0x99, 0xdb, 0x7e, 0x3c, 0x18, 0x00, 0x03, 0x33, 0x63, 0xfe, 0x60, 0x30, 0x00, 
      0x3c, 0x66, 0xff, 0xdb, 0xdb, 0xff, 0x66, 0x3c, 0x3c, 0x66, 0xc3, 0xdb, 0xdb, 0xc3, 0x66, 0x3c, 
      0xff, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xff, 0x3c, 0x7e, 0xdb, 0xdb, 0xdf, 0xc3, 0x66, 0x3c, 
      0x3c, 0x66, 0xc3, 0xdf, 0xdb, 0xdb, 0x7e, 0x3c, 0x3c, 0x66, 0xc3, 0xfb, 0xdb, 0xdb, 0x7e, 0x3c, 
      0x3c, 0x7e, 0xdb, 0xdb, 0xfb, 0xc3, 0x66, 0x3c, 0x00, 0x01, 0x33, 0x1e, 0xce, 0x7b, 0x31, 0x00, 
      0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xe7, 0x03, 0x03, 0x03, 0xff, 0x03, 0x03, 0x03, 0x00, 
      0xff, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xff, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 
      0x3c, 0x66, 0x66, 0x30, 0x18, 0x00, 0x18, 0x00, 0x3c, 0x66, 0xc3, 0xff, 0xc3, 0xc3, 0x66, 0x3c, 
      0xff, 0xdb, 0xdb, 0xdb, 0xfb, 0xc3, 0xc3, 0xff, 0xff, 0xc3, 0xc3, 0xfb, 0xdb, 0xdb, 0xdb, 0xff, 
      0xff, 0xc3, 0xc3, 0xdf, 0xdb, 0xdb, 0xdb, 0xff, 0xff, 0xdb, 0xdb, 0xdb, 0xdf, 0xc3, 0xc3, 0xff, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, 
      0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 
      0x18, 0x3e, 0x58, 0x3c, 0x1a, 0x7c, 0x18, 0x00, 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00, 
      0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 
      0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 
      0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xc6, 0x7c, 0x00, 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 
      0x3c, 0x66, 0x06, 0x3c, 0x60, 0x66, 0x7e, 0x00, 0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00, 
      0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00, 0x7e, 0x62, 0x60, 0x7c, 0x06, 0x66, 0x3c, 0x00, 
      0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00, 0x7e, 0x66, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x00, 
      0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00, 0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00, 
      0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 
      0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 
      0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x3c, 0x66, 0x66, 0x0c, 0x18, 0x00, 0x18, 0x00, 
      0x60, 0x10, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00, 0x18, 0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00, 
      0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00, 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00, 
      0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00, 
      0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00, 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00, 
      0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 
      0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 
      0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00, 
      0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 
      0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xda, 0xcc, 0x76, 0x00, 
      0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00, 0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00, 
      0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 
      0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00, 
      0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00, 
      0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 
      0x00, 0x00, 0x3c, 0x66, 0x60, 0x3e, 0x08, 0x18, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 
      0x18, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
      0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00, 
      0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x00, 
      0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, 
      0x1c, 0x36, 0x30, 0x78, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x7c, 
      0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00, 
      0x06, 0x00, 0x0e, 0x06, 0x06, 0x66, 0x66, 0x3c, 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00, 
      0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xd6, 0xd6, 0xc6, 0x00, 
      0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00, 
      0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e, 
      0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x60, 0x3c, 0x06, 0x7c, 0x00, 
      0x30, 0x30, 0x7c, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 
      0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 
      0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x7c, 
      0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00, 0x06, 0x08, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, 
      0x30, 0x08, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x60, 0x10, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00, 
      0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
      0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
      0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 
      0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 
      0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
      0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
      0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1f, 0x0f, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
      0x00, 0x00, 0x00, 0x0f, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18, 
      0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0xf0, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18, 
      0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 
      0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x38, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0xf8, 0x60, 0x66, 0xfe, 0x00, 
      0x38, 0x44, 0xba, 0xa2, 0xba, 0x44, 0x38, 0x00, 0x7e, 0xf4, 0xf4, 0x74, 0x34, 0x34, 0x34, 0x00, 
      0x1e, 0x30, 0x38, 0x6c, 0x38, 0x18, 0xf0, 0x00, 0x18, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x40, 0xc0, 0x44, 0x4c, 0x54, 0x1e, 0x04, 0x00, 0x40, 0xc0, 0x4c, 0x52, 0x44, 0x08, 0x1e, 0x00, 
      0xe0, 0x10, 0x62, 0x16, 0xea, 0x0f, 0x02, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x7e, 0x00, 
      0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x06, 0x06, 0x00, 0x00, 
      0x18, 0x00, 0x18, 0x30, 0x66, 0x66, 0x3c, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 
      0x00, 0x00, 0x73, 0xde, 0xcc, 0xde, 0x73, 0x00, 0x7c, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xf8, 0xc0, 
      0x00, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00, 0x3c, 0x60, 0x60, 0x3c, 0x66, 0x66, 0x3c, 0x00, 
      0x00, 0x00, 0x1e, 0x30, 0x7c, 0x30, 0x1e, 0x00, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00, 
      0x00, 0xc0, 0x60, 0x30, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 
      0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0x70, 0x00, 
      0x03, 0x06, 0x0c, 0x3c, 0x66, 0x3c, 0x60, 0xc0, 0x03, 0x06, 0x0c, 0x66, 0x66, 0x3c, 0x60, 0xc0, 
      0x00, 0xe6, 0x3c, 0x18, 0x38, 0x6c, 0xc7, 0x00, 0x00, 0x00, 0x66, 0xc3, 0xdb, 0xdb, 0x7e, 0x00, 
      0xfe, 0xc6, 0x60, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x6c, 0xee, 0x00, 
      0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 
      0x18, 0x3c, 0x66, 0xc3, 0x81, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x06, 0x03, 0x03, 0x06, 0x0c, 0x18, 
      0x00, 0x00, 0x00, 0x81, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x30, 0x60, 0xc0, 0xc0, 0x60, 0x30, 0x18, 
      0x18, 0x30, 0x60, 0xc1, 0x83, 0x06, 0x0c, 0x18, 0x18, 0x0c, 0x06, 0x83, 0xc1, 0x60, 0x30, 0x18, 
      0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3, 
      0x03, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xc0, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0x03, 
      0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
      0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 
      0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 
      0xaa, 0x55, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 
      0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xa0, 0x50, 0xa0, 0x50, 0xa0, 0x50, 0xa0, 0x50, 
      0xaa, 0x54, 0xa8, 0x50, 0xa0, 0x40, 0x80, 0x00, 0xaa, 0x55, 0x2a, 0x15, 0x0a, 0x05, 0x02, 0x01, 
      0x01, 0x02, 0x05, 0x0a, 0x15, 0x2a, 0x55, 0xaa, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xa8, 0x54, 0xaa, 
      0x7e, 0xff, 0x99, 0xff, 0xbd, 0xc3, 0xff, 0x7e, 0x7e, 0xff, 0x99, 0xff, 0xc3, 0xbd, 0xff, 0x7e, 
      0x38, 0x38, 0xfe, 0xfe, 0xfe, 0x10, 0x38, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 
      0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0xfe, 0x10, 0x38, 0x00, 
      0x00, 0x3c, 0x66, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x3c, 0x00, 
      0x00, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 
      0x0f, 0x07, 0x0d, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 
      0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x7c, 0x38, 0x18, 0x1c, 0x1e, 0x1b, 0x18, 0x78, 0xf8, 0x70, 
      0x99, 0x5a, 0x24, 0xc3, 0xc3, 0x24, 0x5a, 0x99, 0x10, 0x38, 0x38, 0x38, 0x38, 0x38, 0x7c, 0xd6, 
      0x18, 0x3c, 0x7e, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x7e, 0x3c, 0x18, 
      0x10, 0x30, 0x70, 0xff, 0xff, 0x70, 0x30, 0x10, 0x08, 0x0c, 0x0e, 0xff, 0xff, 0x0e, 0x0c, 0x08, 
      0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 
      0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00, 
      0x38, 0x38, 0x92, 0x7c, 0x10, 0x28, 0x28, 0x28, 0x38, 0x38, 0x10, 0xfe, 0x10, 0x28, 0x44, 0x82, 
      0x38, 0x38, 0x12, 0x7c, 0x90, 0x28, 0x24, 0x22, 0x38, 0x38, 0x90, 0x7c, 0x12, 0x28, 0x48, 0x88, 
      0x00, 0x3c, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x3c, 0xff, 0xff, 0x18, 0x0c, 0x18, 0x30, 0x18, 
      0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00];
  
  // Prints text with 8x8 CPC font
  fillText(x, y, text, color)
  {
    for (var i in text)
    {
      var c = text.charCodeAt(i);
      for (var dy=0; dy<8; dy++)
        for (var dx=0; dx<8; dx++)
          if ((this.fontCPC[c*8 + dy] & (128>>dx))!=0)
            this.setPixel(x+i*8+dx, y+dy, color);
    }
  }

}

// Helper particle class
class Particle
{
  constructor(x, y, pixelmap, color)
  {
    this.x = x;
    this.y = y;
    this.pixelmap = pixelmap;
    this.color = color;
  }

  // Returns an object with booleans indicating if surrounding pixels are set  
  situation()
  {
    return {up:     this.pixelmap.isSet(this.x,   this.y-1),
            down:   this.pixelmap.isSet(this.x,   this.y+1),
            left:   this.pixelmap.isSet(this.x-1, this.y) ||
                    this.pixelmap.isSet(this.x-1, this.y+1),
            right:  this.pixelmap.isSet(this.x+1, this.y) ||
                    this.pixelmap.isSet(this.x+1, this.y+1)};
  }

  // Returns object {dx,dy}
  displacement()
  {
    var res = {dx:0, dy: 0};

    // Only if pixel at current position is set
    if (this.pixelmap.isSet(this.x, this.y))
    {
      var s = this.situation();

      // Free fall
      if ((!s.up) && (!s.down))
        res.dy = 1;
      // Slide left or right
      else if (s.down && ((!s.left) || (!s.right)))
      {
        res.dy = 1;
        res.dx = !s.right ? 1 : -1;

        // If both directions are possible then goes right if x position is even, left if odd
        if ((!s.left) && (!s.right))
          res.dx = (this.x % 2) == 0 ?  1 : -1;
        }
    }
  
    return res;
  }

  move(displacement, color=undefined)
  {
    this.pixelmap.setPixel(this.x, this.y, this.pixelmap.background);
    this.x += displacement.dx;
    this.y += displacement.dy;
    this.pixelmap.setPixel(this.x, this.y, color!=undefined ? color:this.color);
  }
}

// List of particles moving on a given PixelMap
class ParticleList
{
  constructor(pixelmap, color)
  {
    this.pixelmap = pixelmap;
    this.color = color;

    this.list = [];
    for (var y=this.pixelmap.height-1; y>=0; y--)
      for (var x=0; x<this.pixelmap.width; x++)
        if (this.pixelmap.isSet(x, y))
        {
          var p = new Particle(x, y, pixelmap, color);
          this.list.push(p);
        }
  }

  // Update position of particles and move them on pixel map
  update()
  {
    // Counters
    var dead = 0, moving = 0;

    // Updates positions and draws 
    for (var p of this.list)
    {
      var d = p.displacement();
      if (d.dy!=0 || d.dx!=0)
      {
        moving++;
        p.move(d, 0xFFFFFFFF);
      }
      else
      {
        dead++;
        p.move(d);
      }
    }

    status(`list length ${this.list.length}, ${moving} moving, ${dead} dead`);
  }
}

var SAND_STATIC_COLOR = 0xF0F000FF; // Yellow
var BACKGROUND_COLOR = 0x000080FF;  // Darkblue

// Inits PixelMap
var pixelmap = new PixelMap("canvas", BACKGROUND_COLOR);
pixelmap.fillText(0, 8,  " Amstrad 128K Microcomputer  (v3)", SAND_STATIC_COLOR);
pixelmap.fillText(0, 24, " " + String.fromCharCode(164) + "1985 Amstrad Consumer Electronics plc", SAND_STATIC_COLOR);
pixelmap.fillText(0, 32, "           and Locomotive Software Ltd.", SAND_STATIC_COLOR);
pixelmap.fillText(0, 56, " BASIC 1.1", SAND_STATIC_COLOR);
pixelmap.fillText(0, 72, "Ready", SAND_STATIC_COLOR);
pixelmap.fillText(0, 80, String.fromCharCode(143), SAND_STATIC_COLOR);
//pixelmap.fillRect(20, 140, 280, 50, SAND_STATIC_COLOR);
pixelmap.draw();

// Inits ParticleList
var list = new ParticleList(pixelmap, SAND_STATIC_COLOR);

pixelmap.fillRect(20, 190, 280, 5, SAND_STATIC_COLOR);

// Starts animation
window.requestAnimationFrame(update);

function update()
{
  // Updates particles and draws
  list.update();
  pixelmap.draw();

  // Next animation frame
  window.requestAnimationFrame(update);
}


